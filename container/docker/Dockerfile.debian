# Build stage
FROM localhost:4000/rust-builder AS builder

WORKDIR /app

# Copy the Cargo.toml and Cargo.lock files first. This is crucial for caching.
# If these files don't change, Docker can reuse the cached layers for `cargo build`.
COPY Cargo.toml Cargo.lock ./
# A dummy build to download and cache dependencies.
# This command doesn't create a binary, but it populates the Cargo cache.
RUN mkdir -p src \
    && echo "fn main() {println!(\"hello, world\");}" > src/main.rs \
    && cargo build --release
# Clean up the dummy main.rs and src directory to prepare for the actual code.
RUN rm -rf src

COPY . .

#RUN cargo fetch
RUN mkdir -p logs
RUN mkdir -p static
RUN mkdir -p templates
RUN RUST_BACKTRACE=1 cargo build --release
RUN mv /app/target/release/axum_file_management_service /app/app

# Production stage
FROM debian:bookworm-slim

RUN apt-get update
RUN apt-get install pkg-config libssl-dev default-libmysqlclient-dev libmariadb-dev libpq5 openssl -y
RUN rm -rf /var/lib/apt/lists/*

WORKDIR /opt/axum_file_management

COPY --from=builder /app/app .
COPY --from=builder /app/static static/
COPY --from=builder /app/logs logs/
COPY --from=builder /app/templates templates/
COPY --from=builder /app/.env.kubernates .env
COPY --from=builder /app/log4rs.yml .

ENV RUST_BACKTRACE=1

# Run app
CMD ["/opt/axum_file_management/app"]
